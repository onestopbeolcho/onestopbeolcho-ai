rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 관리자 확인
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin';
    }

    // 작업자 확인
    function isWorker() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'worker';
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin();
    }
    match /workerApplications/{applicationId} {
      allow read, create, update, delete: if isAdmin();
    }
    match /portfolio/{portfolioId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /serviceRequests/{serviceRequestId} {
      allow get, list: if isAdmin() || isWorker() || request.auth == null;
      allow create: if true;
      allow update, delete: if isAdmin();
      allow update: if isWorker() && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'fileUrls', 'workerId']);
    }
    match /re-requests/{reRequestId} {
      allow get: if request.auth == null;
      allow list: if request.auth == null;
      allow create: if true;
      allow update, delete: if isAdmin();
    }
    match /workLogs/{workLogId} {
      allow read, create, update: if isAdmin() || (isWorker() && resource.data.workerId == request.auth.uid);
      allow delete: if isAdmin();
    }
    match /reviews/{reviewId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}